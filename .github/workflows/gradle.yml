# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
#
# Created By: Scott Griffis
# Date: 09/11/2020
# 
# This file was created using documentation from all over the Internet coupled with much sweat, tears, trials and errors.
# The purpose of this file is to automate Releases based on code being merged into the Master branch.
# #############################################################################################################################
name: Java CI with Gradle

on:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    - uses: jungwinter/split@v1
      id: split
      with:
        msg: ${{ github.repository }}
        seperator: '/'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.split.outputs._1 }}
        path: ./build/libs/
        
    - name: Get Application Version
      run: echo "::set-env name=RELEASE_VERSION::$(cat ./appVersion.dat)"
       
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ steps.split.outputs._1 }}_V${{ env.RELEASE_VERSION }}
          release_name: Release ${{ steps.split.outputs._1 }} - Version ${{ env.RELEASE_VERSION }}
          #body_path: ./ # <-- Optional, use if release notes are desired
          draft: false
          prerelease: false
          
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/libs/${{ steps.split.outputs._1 }}.jar
          asset_name: ${{ steps.split.outputs._1 }}.jar
          asset_content_type: application/zip
